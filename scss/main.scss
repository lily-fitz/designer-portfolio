@use 'base' as *;
@use 'abstracts' as *;
@use 'layout' as *;
@use 'components' as *;

@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,300&display=swap');

.grid-intro {
  gap: $gap;

  .intro-top {
    @include pad-vertical-inline-top();
    align-self: center;

    display: flex;
    flex-direction: column;

    gap: $gap;
  }

  h2 {
    font-size: $fs-h6;
  }

  @include mq-min(small) {
    grid-template-columns: repeat(2, minmax(0, 1fr));

    .intro-top {
      grid-column: 1 / 3;
      flex-direction: row;
      justify-content: space-between;

      &__heading {
        flex-basis: 46%;
      }

      &__newsletter {
        align-self: flex-end;
        flex-basis: 44%;
      }
    }

    .intro__info-three {
      grid-column: 1 / 3;
    }
  }

  @include mq-min(medium) {
    grid-template-columns: repeat(3, minmax(0, 1fr));

    .intro-top {
      grid-column: 1 / 4;
    }

    .intro__info-three {
      grid-column: 3 / 4;
    }
  }
}

.banner {
  @include container-full();

  background-color: dodgerblue;
  margin-top: 10rem;
  margin-bottom: 10rem;
}

.grid-banner {
  min-height: 6vh;
  place-items: center;
}

// .grid-intro {
//   @include container();

//   gap: 3rem;
//   //min-height: 80vh;

//   div:nth-child(-n + 2) {
//     background-color: dodgerblue;
//     min-height: 10rem;
//     align-content: center;
//   }

//   @media (min-width: 40rem) {
//     grid-template-columns: repeat(6, minmax(0, 1fr));
//     // grid-template-rows: clamp(10rem, 58vh, 30rem) auto;

//     div:nth-child(-n + 2) {
//       @include pad-vertical-inline();
//       align-self: center;
//     }

//     &__heading {
//       grid-column: 1 / 4;
//     }

//     &__newsletter {
//       grid-column: 4 / 7;
//     }

//     .grid-intro__info-one {
//       grid-column: 1 / 3;
//     }

//     .grid-intro__info-two {
//       grid-column: 3 / 5;
//     }

//     .grid-intro__info-three {
//       grid-column: 5 / 7;
//     }
//   }
// }

// :root {
//     //for nested maps, in this case SHADES in COLORS
//     @each $color, $shades in $colors {
//         @each $shade, $value in $shades {
//             --clr-#{$color}-#{$shade}: #{$value};
//             //if getting value directly
//             //color: $shades;
//         }
//     }

//     @each $screen-size, $font-size in $type-scale {
//         // @each $font-size, $value in $screen-size {
//         //     --fs-#{$screen-size}-#{$font-size}: #{$value};
//         // }
//         @if $screen-size == small {
//             @each $size, $value in $font-size {
//                 --fs-#{$size}: #{$value};
//             } @else {
//                 @include mq(small) {
//                     @each $size, $value in $font-size {
//                         --fs-#{$size}: #{$value};
//                     }
//                 }
//             }
//         }
//     }
// }

// //build classes

// @each $color, $shades in $colors {
//     @each $shade, $value in $shades {
//         .text-#{$color}-#{$shade} {
//             color: $value;
//             //color: var(--fs-#{$color}-#{$shade};
//         }
//     }
// }
